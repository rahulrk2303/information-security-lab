#caesar

def encrypt(text,s): 
    result = "" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + s - 65) % 26 + 65) 
        else: 
            result += chr((ord(char) + s - 97) % 26 + 97) 
    return result 

def decrypt(text, s):
    return encrypt(cipher, 26-s)

text = input("Enter text : ")
s = int(input("Shift : ")) 
cipher = encrypt(text,s)
print ("Encrypted text: " + cipher)
decipher = decrypt(cipher,s)
print ("Decrypted text: " + decipher)


# vigenere

def generateKey(string, key):
    key = list(key)
    if len(string) == len(key):
        return key
    else:
        for i in range(len(string) - len(key)):
            key.append(key[i % len(key)]
    return ("".join(key))                 

def cipherText(string, key):
    cipher_text = []
    for i in range(len(string)):
        x = (ord(string[i]) + ord(key[i])) % 26
        x += ord('A')
        cipher_text.append(chr(x))
    return ("".join(cipher_text))

def decipherText(cipher_text, key):
    orig_text = []
    for i in range(len(cipher_text)):       x = (ord(cipher_text[i]) - ord(key[i]) + 26) % 26               
        x += ord('A')
        orig_text.append(chr(x))
    return ("".join(orig_text))

string = input("Enter text : ")
keyword = (input("Key : "))
key = generateKey(string, keyword)
cipher = cipherText(string,key)
print ("Encrypted text: " + cipher)
decipher = decipherText(cipher,key)
print ("Decrypted text: " + decipher)


# playfair

key=input("Enter key")
key=key.replace(" ", "")
key=key.upper()
def matrix(x,y,initial):
    return [[initial for i in range(x)] for j in range(y)]
    
result=list()
for c in key: #storing key
    if c not in result:
        if c=='J':
            result.append('I')
        else:
            result.append(c)
flag=0
for i in range(65,91): #storing other character
    if chr(i) not in result:
        if i==73 and chr(74) not in result:
            result.append("I")
            flag=1
        elif flag==0 and i==73 or i==74:
            pass    
        else:
            result.append(chr(i))
k=0
my_matrix=matrix(5,5,0) #initialize matrix
for i in range(0,5): #making matrix
    for j in range(0,5):
        my_matrix[i][j]=result[k]
        k+=1

def locindex(c): #get location of each character
    loc=list()
    if c=='J':
        c='I'
    for i ,j in enumerate(my_matrix):
        for k,l in enumerate(j):
            if c==l:
                loc.append(i)
                loc.append(k)
                return loc
            
def encrypt():  #Encryption
    msg=str(input("ENTER MSG:"))
    msg=msg.upper()
    msg=msg.replace(" ", "")             
    i=0
    for s in range(0,len(msg)+1,2):
        if s<len(msg)-1:
            if msg[s]==msg[s+1]:
                msg=msg[:s+1]+'X'+msg[s+1:]
    if len(msg)%2!=0:
        msg=msg[:]+'X'
    print("CIPHER TEXT:",end=' ')
    while i<len(msg):
        loc=list()
        loc=locindex(msg[i])
        loc1=list()
        loc1=locindex(msg[i+1])
        if loc[1]==loc1[1]:
            print("{}{}".format(my_matrix[(loc[0]+1)%5][loc[1]],my_matrix[(loc1[0]+1)%5][loc1[1]]),end=' ')
        elif loc[0]==loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1]+1)%5],my_matrix[loc1[0]][(loc1[1]+1)%5]),end=' ')  
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]]),end=' ')    
        i=i+2        
                 
def decrypt():  #decryption
    msg=str(input("ENTER CIPHER TEXT:"))
    msg=msg.upper()
    msg=msg.replace(" ", "")
    print("PLAIN TEXT:",end=' ')
    i=0
    while i<len(msg):
        loc=list()
        loc=locindex(msg[i])
        loc1=list()
        loc1=locindex(msg[i+1])
        if loc[1]==loc1[1]:
            print("{}{}".format(my_matrix[(loc[0]-1)%5][loc[1]],my_matrix[(loc1[0]-1)%5][loc1[1]]),end=' ')
        elif loc[0]==loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1]-1)%5],my_matrix[loc1[0]][(loc1[1]-1)%5]),end=' ')  
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]]),end=' ')    
        i=i+2        

while(1):
    choice=int(input("\n 1.Encryption \n 2.Decryption: \n 3.EXIT"))
    if choice==1:
        encrypt()
    elif choice==2:
        decrypt()
    elif choice==3:
        exit()
    else:
        print("Choose correct choice")


# single columnar

import math 
key = "HACK"
  
# Encryption 
def encryptMessage(msg): 
    cipher = "" 
    k_indx = 0
    msg_len = float(len(msg)) 
    msg_lst = list(msg) 
    key_lst = sorted(list(key)) 
    col = len(key) 
    row = int(math.ceil(msg_len / col)) 
    fill_null = int((row * col) - msg_len) 
    msg_lst.extend('_' * fill_null) 
    matrix = [msg_lst[i: i + col]  
              for i in range(0, len(msg_lst), col)] 
    for _ in range(col): 
        curr_idx = key.index(key_lst[k_indx]) 
        cipher += ''.join([row[curr_idx]  
                          for row in matrix]) 
        k_indx += 1
  
    return cipher 
  
# Decryption 
def decryptMessage(cipher): 
    msg = "" 
    k_indx = 0
    msg_indx = 0
    msg_len = float(len(cipher)) 
    msg_lst = list(cipher) 
    col = len(key) 
    row = int(math.ceil(msg_len / col)) 
    key_lst = sorted(list(key)) 
    dec_cipher = [] 
    for _ in range(row): 
        dec_cipher += [[None] * col] 
    for _ in range(col): 
        curr_idx = key.index(key_lst[k_indx]) 
        for j in range(row): 
            dec_cipher[j][curr_idx] = msg_lst[msg_indx] 
            msg_indx += 1
        k_indx += 1
    try: 
        msg = ''.join(sum(dec_cipher, [])) 
    except TypeError: 
        raise TypeError("This program cannot", 
                        "handle repeating words.") 
  
    null_count = msg.count('_') 
  
    if null_count > 0: 
        return msg[: -null_count] 
  
    return msg 
  
# Driver Code 
msg = "Ramya is intelligent"
  
cipher = encryptMessage(msg) 
print("Encrypted Message: {}". 
               format(cipher)) 
  
print("Decryped Message: {}". 
       format(decryptMessage(cipher))) 
  

# Hill Cipher 
  
keyMatrix = [[0] * 3 for i in range(3)] 
messageVector = [[0] for i in range(3)] 
cipherMatrix = [[0] for i in range(3)] 
def getKeyMatrix(key): 
    k = 0
    for i in range(3): 
        for j in range(3): 
            keyMatrix[i][j] = ord(key[k]) % 65
            k += 1
def encrypt(messageVector): 
    for i in range(3): 
        for j in range(1): 
            cipherMatrix[i][j] = 0
            for x in range(3): 
                cipherMatrix[i][j] += (keyMatrix[i][x] * 
                                       messageVector[x][j]) 
            cipherMatrix[i][j] = cipherMatrix[i][j] % 26
  
def HillCipher(message, key): 
    getKeyMatrix(key) 
    for i in range(3): 
        messageVector[i][0] = ord(message[i]) % 65
    encrypt(messageVector) 
    CipherText = [] 
    for i in range(3): 
        CipherText.append(chr(cipherMatrix[i][0] + 65)) 
    print("Ciphertext: ", "".join(CipherText)) 
  
def main(): 
  
    message = "ACT"
    key = "GYBNQKURP"
  
    HillCipher(message, key) 
  
if __name__ == "__main__": 
    main() 
    
    
    
# railfence

s=input("Enter a string")
k=int(input("Enter a number"))
enc=[[" " for i in range(len(s))] for j in range(k)]
print(enc)
row=0
flag=0
for i in range(len(s)):
    enc[row][i]=s[i]
    if(row==0):
        flag=0
    elif(row==k-1):
        flag=1
    if(flag==0):
        row+=1
    else:
        row-=1
for i in range(k):
    print(" ".join(enc[i]))
ct=[]
for i in range(k):
    for j in range(len(s)):
        if(enc[i][j]!=' '):
            ct.append(enc[i][j])
cipher="".join(ct)
print(cipher)
